//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     .NET Micro Framework MFSvcUtil.Exe
//     Runtime Version:2.0.00001.0001
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Text;
using System.Xml;
using Dpws.Device;
using Dpws.Device.Services;
using Ws.Services;
using Ws.Services.WsaAddressing;
using Ws.Services.Xml;
using Ws.Services.Binding;
using Ws.Services.Soap;

namespace schemas.singularbiogentics.com
{
    
    
    public class MyServiceToo : DpwsHostedService
    {
        
        private IMyServiceToo m_service;
        
        public MyServiceToo(IMyServiceToo service, ProtocolVersion version) : 
                base(version)
        {
            // Set the service implementation properties
            m_service = service;

            // Set base service properties
            ServiceNamespace = new WsXmlNamespace("mys", "http://schemas.singularbiogentics.com/");
            ServiceID = "urn:uuid:0790b281-9957-4767-90ce-b3ad4d9fa6e7";
            ServiceTypeName = "MyServiceToo";

            // Add service types here
            ServiceOperations.Add(new WsServiceOperation("http://schemas.singularbiogentics.com/IMyServiceToo", "Start"));

            // Add event sources here
        }
        
        public MyServiceToo(IMyServiceToo service) : 
                this(service, new ProtocolVersion10())
        {
        }
        
        public virtual WsMessage Start(WsMessage request)
        {
            request.Reader.Dispose();
            request.Reader = null;

            // Call service operation to process request.
            m_service.Start();

            // Return a OneWayResponse message for oneway messages
            return WsMessage.CreateOneWayResponse();
        }
    }
    
    public class MyService : DpwsHostedService
    {
        
        private IMyService m_service;
        
        public MyService(IMyService service, ProtocolVersion version) : 
                base(version)
        {
            // Set the service implementation properties
            m_service = service;

            // Set base service properties
            ServiceNamespace = new WsXmlNamespace("mys", "http://schemas.singularbiogentics.com/");
            ServiceID = "urn:uuid:e0ec7e7b-2b63-456d-9fae-2a05ba36cfa0";
            ServiceTypeName = "MyService";

            // Add service types here
            ServiceOperations.Add(new WsServiceOperation("http://schemas.singularbiogentics.com/IMyService", "Start"));

            // Add event sources here
        }
        
        public MyService(IMyService service) : 
                this(service, new ProtocolVersion10())
        {
        }
        
        public virtual WsMessage Start(WsMessage request)
        {
            request.Reader.Dispose();
            request.Reader = null;

            // Call service operation to process request.
            m_service.Start();

            // Return a OneWayResponse message for oneway messages
            return WsMessage.CreateOneWayResponse();
        }
    }
}
